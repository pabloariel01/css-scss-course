cascade

specificity

inline
#id
.classes, :pseudo-classes, [attribute]
<tags> ::psudo-tags

combinators

    adjacent sibling: first p inmediatelly following a div next to in same parent
        div + p{

        }

    general: all p following a div in same parent
    div ~ p {

    }

    child: direct child p of a div(first level)
    div > p{

    }

    descendant: all p inside a div, in any level
    div p{

    }

    selectors

        div, .class-a, #main-title, [disabled], *
    properties
        background, color, width


box model
    marging, border, padding
    margin collapsing: 2 consecutive elements with argins, are collapsed into one, can be overwritten with margin-top and bottom
    box-sizing  => content-box => only content   
                => border-box includes de porder and padding (used with * selector for all elements or collides with block elements)

    display inline-block=> elements dont use 100% only whats necessarty like inline, but still have margin and padding like a block
            inline=> marging and padding top and bottom dont make effect


psudo  classes: defines state
        elements: defines part

!important ==> not advisable => overwrites specificity and selectors

outline => similar to border, but not part of box model

positions   static: default
            fixed: relative to view port, outside of the document flow
            absolute: relative to most closest parent with position set(or html), and takes out of document flow whe we define top, mean the distance of the top of the parent to the top of the element, same with bottom
            relative: doestnt take off the doc flow, relative to closest ancestor with postion set(relative to itself)
            sticky: behaves as fixed, until reach the end of the parent container, needs a top (distance from viewport to elm margin)(relative to viewport and other element)

            z-index onlyworks for position diferent of static
                if position is fixed, z index only affects to elements inside the parent (stacking context -- affects inside the current context)

            stacking context for fixed/sticky or absolute/relative and z-indez => defines the tscking of child elements


images
        background size
            cover: ensures all space is used (fill container)
            contain: full image visible, respects the ratio
            background-clip: if exterds over borders (content)
            background attachment: scrolling behavior
            background-origin: defines image container content-box => container with no paddings

    images and %, only works when parent has a heigh/width and ins a block/ inline-block

units
    porcentages 
        position
            fixed, the porcentage of the viewport
            absolute the pocentage of the ancestor content  +  padding
            relative/static: uses the cleset ancestor (block level)

        width: 80vhmin usa el 80% del max entre 

        viewport in html=> used to indicate browsers to use css units and not zoom
        mobile first: build mobile and adpt with media querys to wider

attribute selectors
    [type] attribute
    [type="email"] attribute with value
    [lang ~="eb-us"] value in list
    [lang |="en"] value o value- ej en-us
    [href^="#"] prefix, starts with
    [href$=".de"] suffix ej href=ab.de
    [src*="cdn"] at least one value ej i.cdn.de
    [src*="cdn" i] case insensitive ej i.CDN.com


flexbox
    container
        display: flex turns into a flex container=> flex-flow, justify-content, align-content, align-items
        children are flex items=> order, flex, align-self

        flex-wrap => if values should wrap and direction (move to other line if it has no space )
        flex-direction=> column: diplay as column(block) main to down
            column-reverse=> main to top, cross to right
            row: axis:  (main left to right, cross top-bot) main to right
            row-reverse (main left, right, cross top, bottom) main to left

        align-items=> how to alignt items on cross axis
            strech, uses all width adpts to container
            center: centers on the middle of the cross axis
            flex-start: elements start on the start of the cross

        justify-content => how to position in the main axis

        align-content=> aling items on the cross axis
    
    items
        order: -1 to begin of main, bigger the later
        align-self: aligns item towards the main (align-items for item)
        flex-grow enable items go grow wider than origina in a rate of (param)
        flex-shink: inverse grow
        flex-basis: depends of fles-direction, size in main axis
